# Generated by Django 4.1 on 2022-10-06 12:48

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='email')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('profession', models.CharField(blank=True, max_length=50)),
                ('institution', models.CharField(blank=True, max_length=50)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='Superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Active')),
            ],
            options={
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='Studies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Unique_identifier', models.CharField(blank=True, help_text='Internal use only', max_length=20, null=True, verbose_name='Unique Identifier')),
                ('Study_group', models.CharField(blank=True, choices=[('SST', 'Superficial skin and throat'), ('IG', 'Invasive GAS'), ('ARF', 'ARF'), ('ASPGN', 'APSGN')], max_length=5, verbose_name='Study Group')),
                ('Paper_title', models.CharField(max_length=200, verbose_name='Paper Title')),
                ('Paper_link', models.CharField(blank=True, max_length=200, verbose_name='Link to Paper Download')),
                ('Year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)], verbose_name='Publication Year')),
                ('Disease', models.CharField(blank=True, max_length=60)),
                ('Study_design', models.CharField(choices=[('CS', 'Case series'), ('CST', 'Cross-sectional'), ('P', 'Prospective'), ('PRP', 'Prospective and Retrospective'), ('PC', 'Prospective cohort'), ('R', 'Report'), ('RP', 'Retrospective'), ('RPR', 'Retrospective review'), ('RPC', 'Retrospective cohort'), ('RA', 'Review article'), ('O', 'Other')], max_length=3)),
                ('Study_design_other', models.CharField(blank=True, default='', max_length=200)),
                ('Study_description', models.CharField(blank=True, default='', max_length=200)),
                ('Case_definition', models.CharField(blank=True, default='', max_length=200)),
                ('Case_findings', models.CharField(blank=True, default='', max_length=200)),
                ('Case_findings_other', models.CharField(blank=True, default='', max_length=200)),
                ('Case_cap_meth', models.CharField(blank=True, default='', max_length=200)),
                ('Case_cap_meth_other', models.CharField(blank=True, default='', max_length=200)),
                ('Data_source', models.CharField(blank=True, default='', max_length=200)),
                ('Coverage', models.CharField(blank=True, default='', max_length=200)),
                ('Jurisdiction', models.CharField(blank=True, default='', max_length=200)),
                ('Specific_region', models.CharField(blank=True, default='', max_length=200)),
                ('Climate', models.CharField(blank=True, default='', max_length=200)),
                ('Aria_remote', models.CharField(blank=True, default='', max_length=200)),
                ('Population_group_strata', models.CharField(blank=True, default='', max_length=200)),
                ('Population_denom', models.CharField(blank=True, default='', max_length=200)),
                ('Age_general', models.CharField(blank=True, choices=[('ALL', 'All'), ('AD', 'Adults'), ('C', 'Children'), ('AL', 'Adolescents'), ('EA', 'Elderly Adults')], max_length=5, verbose_name='Age Category')),
                ('Age_min', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MaxValueValidator(150.0)])),
                ('Age_max', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MaxValueValidator(150.0)])),
                ('Age_original', models.CharField(blank=True, max_length=200, verbose_name='Age Category (Original)')),
                ('Burden_measure', models.CharField(blank=True, max_length=200)),
                ('Ses_reported', models.BooleanField(blank=True, null=True)),
                ('Mortality_data', models.BooleanField(blank=True, null=True)),
                ('Method_limitations', models.BooleanField(blank=True, null=True)),
                ('Limitations_identified', models.CharField(blank=True, max_length=200)),
                ('Other_points', models.CharField(blank=True, max_length=200)),
                ('Notes', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name': 'Study (Any Group)',
                'verbose_name_plural': 'Studies (Any Group)',
            },
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Age_general', models.CharField(blank=True, choices=[('ALL', 'All ages'), ('AD', 'Adult'), ('C', 'Children'), ('AL', 'Adolescents'), ('I', 'Infant'), ('M', 'Mix')], max_length=5, verbose_name='Age Category')),
                ('Age_min', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MaxValueValidator(150.0)], verbose_name='Minimum Age (years)')),
                ('Age_max', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MaxValueValidator(150.0)], verbose_name='Maximum Age (years)')),
                ('Age_original', models.CharField(blank=True, max_length=50, verbose_name='Age Category (Original)')),
                ('Population_gender', models.CharField(blank=True, max_length=30)),
                ('Indigenous_status', models.CharField(blank=True, default='', max_length=20)),
                ('Indigenous_population', models.CharField(blank=True, default='', max_length=30)),
                ('Country', models.CharField(blank=True, default='', max_length=30)),
                ('Jurisdiction', models.CharField(blank=True, default='', max_length=30)),
                ('Specific_location', models.CharField(blank=True, default='', max_length=100)),
                ('Year_start', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('Year_stop', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(2100)])),
                ('Observation_time_years', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MaxValueValidator(150.0)])),
                ('Numerator', models.PositiveIntegerField(blank=True, null=True)),
                ('Denominator', models.PositiveIntegerField(blank=True, null=True)),
                ('Point_estimate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('Point_estimate_original', models.CharField(blank=True, default='', max_length=30)),
                ('Measure', models.TextField(blank=True, default='')),
                ('Interpolated_from_graph', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('Age_standardisation', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('Dataset_name', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('Proportion', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('Mortality_flag', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('Recurrent_ARF_flag', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('GAS_attributable_fraction', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('Defined_ARF', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('?', 'N/A')], default='', max_length=1)),
                ('Focus_of_study', models.TextField(blank=True, default='')),
                ('Notes', models.TextField(blank=True, default='')),
                ('Study', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='database.studies')),
            ],
            options={
                'verbose_name': 'Result (Any Group)',
                'verbose_name_plural': 'Results (Any Group)',
            },
        ),
        migrations.CreateModel(
            name='Studygroup.ARF_studies',
            fields=[
            ],
            options={
                'verbose_name': 'ARF Studies',
                'verbose_name_plural': 'ARF Studies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.studies',),
        ),
        migrations.CreateModel(
            name='Studygroup.ASPGN_studies',
            fields=[
            ],
            options={
                'verbose_name': 'ASPGN Studies',
                'verbose_name_plural': 'ASPGN Studies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.studies',),
        ),
        migrations.CreateModel(
            name='Studygroup.IG_studies',
            fields=[
            ],
            options={
                'verbose_name': 'Invasive GAS Studies',
                'verbose_name_plural': 'Invasive GAS Studies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.studies',),
        ),
        migrations.CreateModel(
            name='Studygroup.SST_studies',
            fields=[
            ],
            options={
                'verbose_name': 'Superficial Skin & Throat Studies',
                'verbose_name_plural': 'Superficial Skin & Throat Studies',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.studies',),
        ),
        migrations.CreateModel(
            name='StudyStudygroup.ARF_results',
            fields=[
            ],
            options={
                'verbose_name': 'ARF Results',
                'verbose_name_plural': 'ARF Results',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.results',),
        ),
        migrations.CreateModel(
            name='StudyStudygroup.ASPGN_results',
            fields=[
            ],
            options={
                'verbose_name': 'ASPGN Results',
                'verbose_name_plural': 'ASPGN Results',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.results',),
        ),
        migrations.CreateModel(
            name='StudyStudygroup.IG_results',
            fields=[
            ],
            options={
                'verbose_name': 'Invasive GAS Results',
                'verbose_name_plural': 'Invasive GAS Results',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.results',),
        ),
        migrations.CreateModel(
            name='StudyStudygroup.SST_results',
            fields=[
            ],
            options={
                'verbose_name': 'Superficial Skin & Throat Results',
                'verbose_name_plural': 'Superficial Skin & Throat Results',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('database.results',),
        ),
    ]
